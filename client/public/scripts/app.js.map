{"version":3,"sources":["app/application.js","app/collections/plugs.js","app/initialize.js","app/models/device.js","app/models/plug.js","app/router.js","app/templates/home.jade","app/views/app_view.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9HA;AAAA","file":"public/scripts/app.js","sourcesContent":["module.exports = {\n\n    initialize: function() {\n        var Router = require('router');\n        this.router = new Router();\n        Backbone.history.start();\n    }\n};","Plug = require('../models/plug');\nmodule.exports = Plugs = Backbone.Collection.extend({\n    model: Plug,\n    url: 'insert'\n});","// The function called from index.html\n$(document).ready(function() {\n    var app = require('application');\n    app.initialize()\n});\n","module.exports = Device = Backbone.Model.extend({\n\turl: '',\n\tdefaults: {\n\t\tpassword: null,\n\t\ttarget: null,\n\t\tdevicename: null, \n\t\tstatus: null\n\t}\n\n});","module.exports = Plug = Backbone.Model.extend({\n\turlRoot: '',\n\tdefaults: {\n\t\tnDocs: null,\n\t\tstatus: null\n\t}\n\n});\n","var AppView = require('views/app_view');\nvar PlugCollection = require('collections/plugs');\nvar DeviceModel = require('models/device');\n\nvar plugs = new PlugCollection();\nvar device = new DeviceModel();\n\nmodule.exports = Router = Backbone.Router.extend({\n\n    routes: {\n        '': 'main',\n        'insert': 'insertPlug'\n    },\n\n    main: function() {\n        var mainView = new AppView({\n            collection: plugs,\n            model: device\n        });\n        mainView.render();\n    },\n\n    insertPlug: function() {\n    \t//alert('toto');\n    }\n});\n","module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {\nattrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;\nvar buf = [];\nwith (locals || {}) {\nvar interp;\nbuf.push('<h1>Plug app</h1><p>Status PlugDB :<strong id=\"status\">' + escape((interp = status) == null ? '' : interp) + '</strong></p><hr/><form><button id=\"initPlug\">Start PlugDB</button><button id=\"closePlug\">Close PlugDB</button></form><br/><form><label>Target URL : </label><input type=\"text\" name=\"targetURL\"/><label>Device name : </label><input type=\"text\" name=\"devicename\" size=\"10\"/><label>Password : </label><input type=\"password\" name=\"pwd\" size=\"10\"/><input id=\"registerDevice\" type=\"submit\" value=\"Register\"/><input id=\"unregisterDevice\" type=\"submit\" value=\"Unregister\"/></form><br/><br/><form><label>Generate n Contacts and insert the ids in PlugDB :</label><input type=\"text\" name=\"nDocs\" size=\"5\"/><input id=\"insertDocs\" type=\"submit\" value=\"Generate\"/></form><p>Share all my contacts ! <a href=\"replicate\"><img src=\"./images/share.jpg\" height=\"60\" width=\"60\"/></a></p><br/><br/><p>Extra : </p><form><label>Target URL : </label><input type=\"text\" name=\"targetURL\" size=\"10\"/><input id=\"registerDevice\" type=\"submit\" value=\"Unregister device\"/></form><form><input id=\"cancelReplication\" type=\"submit\" value=\"Cancel all replications\"/></form><ul></ul><li> <a href=\"https://github.com/Gara64/cozy-plugdb\">Github</a></li>');\n}\nreturn buf.join(\"\");\n};","var Plug = require('../models/plug');\nvar Device = require('../models/device');\n\nmodule.exports = AppView = Backbone.View.extend({\n\n    el: 'body',\n    template: require('../templates/home'),\n    events: {\n    \t\"click #initPlug\" : \"initPlug\",\n    \t\"click #closePlug\" : \"closePlug\",\n    \t\"click #registerDevice\" : \"registerDevice\",\n    \t\"click #unregisterDevice\" : \"unregisterDevice\",\n    \t\"click #insertDocs\": \"createDocs\",\n\t},\n\n    render: function() {\n    \tvar model = this.model;\n        this.$el.html(this.template({status:model.get('status')}));\n    \treturn this;\n    }, \n\n    updateStatus: function() {\n    \t//this.$el.find('')\n    },\n\n    initPlug: function(event) {\n    \tevent.preventDefault();\n    \tvar plug = new Plug({});\n\t    plug.urlRoot = '/init';\n\t    plug.save();\n\n    },\n\n    closePlug: function(event) {\n    \tevent.preventDefault();\n    \tvar plug = new Plug({});\n\t    plug.urlRoot = '/close';\n\t    plug.save();\n    },\n\n\tregisterDevice: function(event) {\n\t\tevent.preventDefault();\n\t\t_this = this;\n\t\tvar device = new Device({\n\t\t\ttarget: this.$el.find('input[name=\"targetURL\"]').val(),\n\t\t\tpassword: this.$el.find('input[name=\"pwd\"]').val(),\n\t\t\tdevicename: this.$el.find('input[name=\"devicename\"]').val()\n\t\t});\n\t\tconsole.log('name ' + device.get('devicename'));\n\t\tconsole.log('url ' + device.get('target'));\n\t    device.url = '/register/true';\n\t    device.save({}, {\n\t    \tsuccess: function(model, response) {\n\t\t        console.log('SUCCESS:');\n\t\t        _this.model.set({status: response.responseText});\n\t\t        _this.render();\n\t\t    },\n\t\t    error: function(model, response) {\n\t\t        console.log('FAIL:');\n\t\t        console.log(response);\n\t\t        console.log('responseText : ' + response.responseText);\n\t\t        _this.model.set({status: response.responseText});\n\t\t        _this.render();\n\t\t    }\n\t\t});\n\n\t}, \n\n\tunregisterDevice: function(event) {\n\t\tevent.preventDefault();\n\t\t_this = this;\n\t\tvar device = new Device({\n\t\t\ttarget: this.$el.find('input[name=\"targetURL\"]').val(),\n\t\t\tpassword: this.$el.find('input[name=\"pwd\"]').val(),\n\t\t\tdevicename: this.$el.find('input[name=\"devicename\"]').val()\n\t\t});\n\t\tdevice.url = '/register/false';\n\t    device.save({}, {\n\t    \tsuccess: function(model, response) {\n\t\t        console.log('SUCCESS:');\n\t\t        _this.model.set({status: response.responseText});\n\t\t        _this.render();\n\t\t    },\n\t\t    error: function(model, response) {\n\t\t        console.log('FAIL:');\n\t\t        console.log(response);\n\t\t        console.log('responseText : ' + response.responseText);\n\t\t        _this.model.set({status: response.responseText});\n\t\t        _this.render();\n\t\t    }\n\t\t});\n\t},\n\n    createDocs: function(event) {\n\t    // submit button reload the page, we don't want that\n\t   event.preventDefault();\t\n\n\t    // create a new model\n\t    var plug = new Plug({\n\t        nDocs: this.$el.find('input[name=\"nDocs\"]').val()\n\t    });\n\t    plug.urlRoot = '/insert'; \n\n\t    // add it to the collection\n\t   //his.collection.add(plug);\n\n\t    plug.save({}, {\n\t\t    success: function(model, response) {\n\t\t        console.log('SUCCESS:');\n\t\t        console.log(response);\n\t\t    },\n\t\t    error: function(model, response) {\n\t\t        console.log('FAIL:');\n\t\t        console.log(response);\n\t\t    }\n\t\t});\n\t}, \n\n\t// initialize is automatically called once after the view is constructed\n\tinitialize: function() {\n\t    this.listenTo(this.collection, \"insert\", this.onInsertPlug);\n\t},\n\tonInsertPlug: function(model) {\n\t    // re-render the view\n\t    this.render();\n\t}\n});"]}